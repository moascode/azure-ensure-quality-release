name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
pool: Test

variables:
  python.version: '3.10.6'
  azureServiceConnectionId: 'moascodeAzureRmSc'
  azureSubscriptionId: 'Pay-As-You-Go-Mastery(246c6ed1-ec54-4be8-81fc-1e5c45aa22d7)' 
  # Project root folder
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test-vm'

stages:

#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  #---------------- Build Infrastructure using terraform ----------------------------# 
  - job: BuildInfrastructure
    pool: Test
    steps:

    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'qualityrelease'
        backendAzureRmStorageAccountName: 'qrstorage333210375'
        backendAzureRmContainerName: 'qrtfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
    # Run Terraform Validate  
    - task: TerraformTaskV4@4
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    # Run Terraform Apply
    - task: TerraformTaskV4@4
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  #---------------- Build and publish package ----------------------------# 
  - job: BuildAndPublishPackage
    pool: Test
    steps:
    # Selenium (UI) Test Suite - Archive and publish the package  
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip' 
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests  
    # FakeRestAPI - Archive and publish the package
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    # JMeter (Performance) Test Suite - Archive and publish the package
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip' 
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #---------------- Deploy FakeRestAPI Web App and Run JMeter | Performance tests ----------------------------#   
  - deployment: FakeRestAPI
    pool: Test
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy WebApp'
            inputs:
              azureSubscription: '$(azureSubscriptionId)'
              appType: 'webApp'
              appName: 'moascodeapp-AppService'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            displayName: 'Install Jmeter'
            inputs:
              script: |
                if [ ! -f apache-jmeter-5.5.tgz ]; then
                  wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz"
                  tar xzvf apache-jmeter-5.5.tgz
                fi
                mkdir -p output/jmeter
                mkdir -p output/jmeter/result
                unzip -o $(Build.BuildId)-perftests.zip -d output/jmeter
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
          - task: CmdLine@2
            displayName: 'Endurance Test'
            inputs:
              script: |
                mkdir -p output/jmeter/endurancetest
                ./apache-jmeter-5.5/bin/jmeter -n -t output/jmeter/EnduranceTest.jmx \
                -l output/jmeter/endurancetest/endurance-test-result.csv \
                -e -f -o output/jmeter/endurancetest/endurance-test-report.html \
                -j output/jmeter/endurancetest/endurance.log
                cat output/jmeter/endurancetest/endurance.log
                zip -r output/jmeter/result/endurance-test-report.zip output/jmeter/endurancetest/
                pwd
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
          - task: CmdLine@2
            displayName: 'Stress Test'
            inputs:
              script: |
                mkdir -p output/jmeter/stresstest
                ./apache-jmeter-5.5/bin/jmeter -n -t output/jmeter/StressTest.jmx \
                -l output/jmeter/stresstest/stres-test-result.csv \
                -e -f -o output/jmeter/stresstest/stres-test-report.html \
                -j output/jmeter/stresstest/stres.log
                cat output/jmeter/stresstest/stres.log
                zip -r output/jmeter/result/stres-test-report.zip output/jmeter/stresstest/
                pwd
              workingDirectory: $(Pipeline.Workspace)/drop-perftests

#   #---------------- Deploy Virtual Machine and Run Selenium | Functional UI tests ----------------------------# 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: '$(environmentName)'
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
          - task: Bash@3  
            displayName: 'UI Test'
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                mkdir -p output/selenium
                mkdir -p output/selenium/result
                unzip -o $(Build.BuildId)-uitests.zip -d output/selenium
                if [ ! -f chromedriver_linux64.zip ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                echo "Starting Selenium Tests"
                python3 output/selenium/add_remove_from_cart.py >> output/selenium/result/selenium.log
                echo "Completed Selenium Tests."
                cat selenium.log
                pwd
              workingDirectory: $(Pipeline.Workspace)/drop-ui-tests

# #--------------------------------------------#  
# # TEST STAGE
# #--------------------------------------------#
# - stage: PostDeploymentTest
#   jobs:
#   #---------------- Run Postman | Validation and Regression tests ----------------------------# 
#   - job: PostmanTest
#     pool: Test
#     steps:
#     # Postman - Install Newman    
#     - task: NodeTool@0
#       displayName: Install Node
#       inputs:
#         versionSpec: '12.x'
#     - bash: |
#         npm install -g newman  
#       displayName: Install Newman CLI
#     # Postman Data Validation Test Suite    
#     - task: CmdLine@2
#       displayName: Run Data Validation Tests
#       continueOnError: true
#       inputs:
#         script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     # Postman Regression Test Suite    
#     - task: CmdLine@2
#       displayName: Run Regression Tests
#       continueOnError: true
#       inputs:
#         script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#     # Postman - Publish Results 
#     - task: PublishTestResults@2
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: '**/TEST-*.xml'
#         searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/result' 
#         mergeTestResults: true
#         testRunTitle: 'Postman Test Run'